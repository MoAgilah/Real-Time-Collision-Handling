#include "Ball.h"

//constructors
Ball::Ball(CommonMesh *sphere,XMFLOAT3 pos)
{
	//all balls same sphere mesh given to them by ball mgr
	m_pMesh = sphere;

	collided = false;

	mPosition = XMFLOAT3(pos);
	mVelocity = XMFLOAT3(0.0f, 0.0f, 0.0f);
	mGravity = XMFLOAT3(0.0f, 0.0f, 0.0f);

	worldMtx = XMMatrixIdentity();
}


Ball::~Ball()
{
	if (m_pMesh)
		m_pMesh = nullptr;
}
//----------------------------------------------------------------------------

void Ball::Update(float dt)
{
	SetWorld(mPosition);
}

void Ball::Draw()
{
	m_pMesh->Draw();
}

//accessors and mutators
bool Ball::GetSphereCollided()
{
	return collided;
}

void Ball::SetSphereCollided(bool val)
{
	collided = val;
}

XMFLOAT3 Ball::GetPosition()
{
	return mPosition;
}

void Ball::SetPosition(XMFLOAT3 pos)
{
	mPosition = pos;
}

XMFLOAT3 Ball::GetVelocity()
{
	return mVelocity;
}

void Ball::SetVelocity(XMFLOAT3 vel)
{
	mVelocity = vel;
}

float Ball::GetSpeed()
{
	return mSpeed;
}

void Ball::SetSpeed(float spd)
{
	mSpeed = spd;
}

XMFLOAT3 Ball::GetGravity()
{
	return mGravity;
}

void Ball::SetGravity(XMFLOAT3 grav)
{
	mGravity = grav;
}

XMMATRIX Ball::GetWorld()
{
	return worldMtx;
}

void Ball::SetWorld(XMFLOAT3 pos)
{
	worldMtx = XMMatrixTranslation(pos.x, pos.y, pos.z);
}
//-------------------------------------------------------

