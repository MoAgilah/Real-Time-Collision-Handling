#include "BallManager.h"
#include "Ball.h"
#include "HeightMap.h"
#include "Collisions.h"
#include "Utils.h"

int BallManager::numOfBall = MinNumBalls;


bool sortX(Ball* i, Ball* j) { 
	return (i->GetPosition().x < j->GetPosition().x); 
}

BallManager::BallManager(HeightMap* mapData)
	:map(mapData)
{
	//create single mesh instance
	m_pMesh = CommonMesh::NewSphereMesh(Application::s_pApp, 1.f, 16, 16);
	//create debug ball
	DebugBall = new Ball(m_pMesh,0);
	//put it in the vector
	activeBalls.push_back(DebugBall);

	//create the mininum of balls
	for (int i = 1; i < MaxNumBalls; i++)
		activeBalls.push_back(new Ball(m_pMesh, i));

	//assign the first non debug ball as first available
	firstAvailable = activeBalls[1];
}


void BallManager::IncreaseNumOfBalls()
{
	if (++numOfBall > MaxNumBalls)
		numOfBall = MaxNumBalls;
}

void BallManager::DecreaseNumOfBalls()
{
	if (--numOfBall < MinNumBalls)
		numOfBall = MinNumBalls;
}

BallManager::~BallManager()
{
	map = nullptr;	//null reference to height map
	for (int i = 0; i < activeBalls.size(); i++)
	{
		//deallocate pointer in array
		delete activeBalls[i];	
		activeBalls[i] = nullptr;
	}
	delete m_pMesh;	//deallocate sphere mesh
}

void BallManager::UpdateWorlds(float dt)
{
	for (int i = 0; i < activeBalls.size(); i++)
	{
		Ball* ball = GetById(i);
		if (ball->GetEnabled()) ball->SetWorld();
	}
}

void BallManager::InitBall(XMFLOAT3 iPos, XMFLOAT3 iVel, XMFLOAT3 iGrav)
{
	Ball* curr = firstAvailable;	//capture the first available in a temp var

	for (int i = 0; i < numOfBall; ++i)
	{
		Ball* next = GetById(i);
		//if activeball is the first available 
		if (next == firstAvailable) continue;	//continue
		
		//the ball isn't active
		if (!next->GetEnabled())
		{
			//make it the first available
			firstAvailable = next;
			//if found break out of loop
			break;
		}
	}
	
	if (curr == firstAvailable) firstAvailable[numOfBall];

	//init the temp ball and then activate it 
	curr->SetPosition(iPos);
	curr->SetVelocity(iVel);
	curr->SetGravity(iGrav);
	curr->SetEnabled(true);
	curr->SetSphereCollided(false);
}

Ball* BallManager::GetById(int id)
{
	for (int i = 0; i < activeBalls.size(); i++)
	{
		if (activeBalls[i]->GetID() == id)
			return activeBalls[i];
	}
}

void BallManager::InitDebugBall(XMFLOAT3 iPos, XMFLOAT3 iVel, XMFLOAT3 iGrav)
{
	//init the debug ball and activate it
	DebugBall->SetPosition(iPos);
	DebugBall->SetVelocity(iVel);
	DebugBall->SetGravity(iGrav);
	DebugBall->SetEnabled(true);
	DebugBall->SetSphereCollided(false);
}

void BallManager::UpdateBalls(float dt)
{
	//Update Sphere
	XMVECTOR vSColPos, vSColNorm;
	float damping = 0.9;

	int numOfTests = 0;
	int testnumofhits = 0;
	
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		Ball* ball = GetById(i);
		if (ball->GetEnabled())
		{
			testnumofhits++;
			//if sphere hasn't collided
			if (!ball->GetSphereCollided())
			{
				//extract the information from the ball
				XMVECTOR vSPos = XMLoadFloat3(&ball->GetPosition());
				XMVECTOR vSVel = XMLoadFloat3(&ball->GetVelocity());
				XMVECTOR vSAcc = XMLoadFloat3(&ball->GetGravity());

				//update the values
				vSPos += vSVel * dt; //Really important that we add LAST FRAME'S velocity as this was how fast the collision is expecting the ball to move
				vSVel += vSAcc * dt; //The new velocity gets passed through to the collision so it can base its predictions on our speed NEXT FRAME

				ball->SetVelocity(vSVel);
				ball->SetPosition(vSPos);

				ball->SetSpeed(XMVectorGetX(XMVector3Length(vSVel)));

				//extract collisional data
				//FaceCollisionData* FCD = map->RayCollision(vSPos, vSVel, ball->GetSpeed(), vSColPos, vSColNorm);
				FaceCollisionData* FCD = map->RayCollision(ball, vSVel, ball->GetSpeed(), vSColPos, vSColNorm);

				bool collided = false;

				//if FCD isnt null
				if (FCD != nullptr)
				{
					//there has been a collision
					collided = true;
				}

				//pass collided to the ball
				ball->SetSphereCollided(collided);

				//if collided
				if (ball->GetSphereCollided())
				{
					//get previous velocity from the ball
					XMVECTOR V = XMLoadFloat3(&ball->GetVelocity());
					//get the face's normal that ball collided with
					XMVECTOR N = XMLoadFloat3(&FCD->m_vNormal);
					//V.N
					float dotVN = XMVectorGetX(XMVector3Dot(V, N));
					//R = V - 2N(V.N)
					XMVECTOR R = (V - ((2 * N)*dotVN))*damping;

					//here for bouncy bouncy
					ball->SetVelocity(R);
					ball->SetSphereCollided(false);
				}
			}
		}
	}
	
	//1-Dimensional Sweep and prune
	OneDimensionalSweepAndPrune(numOfTests);

	char text[256];
	sprintf_s(text, "'num of tests =%i\n", numOfTests);
	OutputDebugStringA(text);

	UpdatePreviousPosition();
	CheckForOutOfBounds();
}

void BallManager::DrawBalls(Application* pApp)
{
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		//if enabled
		if (activeBalls[i]->GetEnabled())
		{
			//set the world matrix
			pApp->SetWorldMatrix(activeBalls[i]->GetWorld());
			//draw the ball
			activeBalls[i]->Draw();
		}
	}
}

void BallManager::CheckForOutOfBounds()
{
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		if (activeBalls[i]->GetEnabled())
		{
			//if below the height map
			if (activeBalls[i]->GetPosition().y <= -10.f)
			{
				//return to the pool
				activeBalls[i]->SetEnabled(false);
			}
		}
	}
}

void BallManager::ClearAll()
{
	//disactivate all of the balls1
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		activeBalls[i]->SetEnabled(false);
	}
}

Ball* BallManager::GetDebugBall()
{
	return DebugBall;
}

void BallManager::DropAll()
{
	//for all expect the debug ball
	for (int i = 1; i < numOfBall; ++i)
	{
		//randomly get a position
		XMFLOAT3 pos = XMFLOAT3((float)((rand() % 14 - 7.0f) - 0.5), 20, (float)((rand() % 14 - 7.0f) - 0.5));
		InitBall(pos, XMFLOAT3(0.0f, 0.2f, 0.0f), XMFLOAT3(0.0f, -0.05f, 0.0f));
	}
}

void BallManager::UpdatePreviousPosition()
{
	for (int i = 0; i < activeBalls.size(); i++)
	{
		activeBalls[i]->SetPrevPosition(activeBalls[i]->GetPosition());
	}
}


void BallManager::OneDimensionalSweepAndPrune(int& numOfTests)
{
	std::sort(activeBalls.begin(), activeBalls.end(), sortX); 

	for (int i = 0; i < activeBalls.size(); ++i)
	{
		if (!activeBalls[i]->GetEnabled()) continue;	//if enabled

		for (int j = i + 1; j < activeBalls.size(); ++j)
		{
			if (!activeBalls[j]->GetEnabled()) continue; //if enabled

			//if(ball1.xmax < ball2.xmin 
			if (activeBalls[i]->GetPosition().x + activeBalls[i]->GetRadius() < activeBalls[j]->GetPosition().x - activeBalls[j]->GetRadius())
				break;

			//check other axes
			//if ball1.maxY < balll2.minY  || ball2.maxY < balll1.minY
			if (activeBalls[i]->GetPosition().y + activeBalls[i]->GetRadius() < activeBalls[j]->GetPosition().y - activeBalls[j]->GetRadius() ||
				activeBalls[j]->GetPosition().y + activeBalls[j]->GetRadius() < activeBalls[i]->GetPosition().y - activeBalls[i]->GetRadius())
				continue;

			//if ball1.maxZ < balll2.minZ || ball2.maxZ < balll1.minZ
			if (activeBalls[i]->GetPosition().z + activeBalls[i]->GetRadius() < activeBalls[j]->GetPosition().z - activeBalls[j]->GetRadius() ||
				activeBalls[j]->GetPosition().z + activeBalls[j]->GetRadius() < activeBalls[i]->GetPosition().z - activeBalls[i]->GetRadius())
				continue;
			
 			numOfTests++;	//if past all early out test has potential collision required increment debug counter
			float t = 0;	//initialie colDist
			
			if (Collisions::GetCol()->TestMovingSphereToSphere(activeBalls[i], activeBalls[j], t))
			{
				Collisions::GetCol()->ResolveIntersection(activeBalls[i], t);

				Collisions::GetCol()->ResolveIntersection(activeBalls[j], t);

				Collisions::GetCol()->ResolveSphereCollisions(activeBalls[i], activeBalls[j]);
			}
		}
	}
}
