#include "Application.h"
#include "HeightMap.h"
#include "Ball.h"

Application* Application::s_pApp = NULL;

const int CAMERA_TOP = 0;
const int CAMERA_ROTATE = 1;
const int CAMERA_MAX = 2;

static int a(0), b(30);

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

bool Application::HandleStart()
{
	s_pApp = this;

	m_frameCount = 0.0f;

	m_bWireframe = true;
	m_pHeightMap = new HeightMap( "Resources/heightmap.bmp", 2.0f, 0.75f );

	ball = new Ball();

	/*m_pSphereMesh = CommonMesh::NewSphereMesh(this, 1.0f, 16, 16);
	mSpherePos = XMFLOAT3( -14.0, 20.0f, -14.0f );
	mSphereVel = XMFLOAT3(0.0f, 0.0f, 0.0f);
	mGravityAcc = XMFLOAT3(0.0f, 0.0f, 0.0f);*/

	m_cameraZ = 50.0f;
	m_rotationAngle = 0.f;

	m_reload = false;

	ReloadShaders();

	if (!this->CommonApp::HandleStart())
		return false;

	this->SetRasterizerState( false, m_bWireframe );

	m_cameraState = CAMERA_ROTATE;

	mSphereCollided = false;

	debugSlow = false;


	return true;
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::HandleStop()
{
	delete m_pHeightMap;

	if( ball )
		delete ball;

	this->CommonApp::HandleStop();
}



//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::ReloadShaders()
{
	if( m_pHeightMap->ReloadShader() == false )
		this->SetWindowTitle("Reload Failed - see Visual Studio output window. Press F5 to try again.");
	else
		this->SetWindowTitle("Your Shader Here. Press F5 to reload shader file.");
}

void Application::HandleUpdate(float dt)
{

	if (this->IsKeyPressed(' '))
	{
		debugSlow = true;
	}
	else
	{
		debugSlow = false;
	}


	if( m_cameraState == CAMERA_ROTATE )
	{
		if (this->IsKeyPressed('Q') && m_cameraZ > 38.0f )
			m_cameraZ -= 1.0f;
		
		if (this->IsKeyPressed('A'))
			m_cameraZ += 1.0f;

		if (this->IsKeyPressed('O'))
			m_rotationAngle -= .01f;
		
		if (this->IsKeyPressed('P'))
			m_rotationAngle += .01f;
	}

	
	static bool dbC = false;

	if (this->IsKeyPressed('C') )	
	{
		if( !dbC )
		{
			if( ++m_cameraState == CAMERA_MAX )
				m_cameraState = CAMERA_TOP;

			dbC = true;
		}
	}
	else
	{
		dbC = false;
	}


	static bool dbW = false;
	if (this->IsKeyPressed('W') )	
	{
		if( !dbW )
		{
			m_bWireframe = !m_bWireframe;
			this->SetRasterizerState( false, m_bWireframe );
			dbW = true;
		}
	}
	else
	{
		dbW = false;
	}


	if (this->IsKeyPressed(VK_F5))
	{
		if (!m_reload)
		{
			ReloadShaders();
			m_reload = true;
		}
	}
	else
		m_reload = false;

	static bool dbR = false;
	if (this->IsKeyPressed('R') )
	{
		if( dbR == false )
		{
			static int dx = 0;
			static int dy = 0;

			ball->SetPosition(XMFLOAT3((float)((rand() % 14 - 7.0f) - 0.5), 20.0f, (float)((rand() % 14 - 7.0f) - 0.5)));
			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			dbR = true;
		}
	}
	else
	{
		dbR = false;
	}

	static bool dbT = false;
	if (this->IsKeyPressed('T'))
	{
		if (dbT == false)
		{
			static int dx = 0;
			static int dy = 0;
			ball->SetPosition(XMFLOAT3(-14.0f, 20.0f, -14.0f));
			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			dbT = true;
		}
	}
	else
	{
		dbT = false;
	}

	static int dx = 0;
	static int dy = 0;
	static int seg = 0;
	int rowLength = 29;
	static int rowNumber = 0;
	static int counter = 0;
	static bool dbN = false;

	if (this->IsKeyPressed('N') )
	{
		if( dbN == false )
		{
			if( ++seg == 2 )
			{
				seg=0;

				if( ++dx==15 )  
				{
					if( ++dy ==15 ) dy=0;
					dx = 0;
				}
			}

			if (++counter == 30)
			{
				counter = 0;
				if (++rowNumber == 15)rowNumber = 0;
			}

			if (seg == 0){
				ball->SetPosition(XMFLOAT3(((dx - 7.0f) * 2) - 0.5f, 20.0f, ((dy - 7.0f) * 2) - 0.5f));
			}
			else{
				ball->SetPosition(XMFLOAT3(((dx - 7.0f) * 2) + 0.5f, 20.0f, ((dy - 7.0f) * 2) + 0.5f));
			}

			

			int index = (((dx * 2) + dy) + seg) + (rowLength*rowNumber);
			
			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			m_pHeightMap->ColourTarget(index, true);

			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			dbN = true;
		}
	}
	else
	{
		dbN = false;
	}

	
	static int dxC = 0;
	static int dyC = 0;
	static int segC = 0;
	static int rowNumberC = 0;
	static int counterC = 0;
	static int cycleCounter = 0;
	static int cycleCom = 0;
	static int switchC = 0;
	static bool debugCycle[2] = { false, false };
	int index = 0;

	
	if (this->IsKeyPressed('U'))
	{
		if (debugCycle[0] == false)
		{
			if (++segC == 2)
			{
				segC = 0;

				//right to left 
				if (cycleCounter == 0)
				{
					if (dxC < 14 - cycleCom)
					{
						++dxC;
					}
					else
					{
						cycleCounter = 1;
					}
				}

				//bottom up
				if (cycleCounter == 1)
				{
					segC = 0;
					if (dyC < 14 - cycleCom){
						++dyC;
						++rowNumberC;
					}
					else
					{
						cycleCounter = 2;
					}
				}

				//left to right
				if (cycleCounter == 2)
				{
					switchC = 1;
					if (dxC > cycleCom)
					{
						--dxC;
					}
					else
					{
						++cycleCom;
						cycleCounter = 3;
					}
				}

				//top down
				if (cycleCounter == 3)
				{
					segC = 0;
					if (dyC > cycleCom){
						--dyC;
						--rowNumberC;

						if (dyC == cycleCom)
						{
							switchC = 0;
						}
					}
					else
					{
						cycleCounter = 4;
					}

					if (cycleCounter == 4)
					{
						if (cycleCom == 8)
						{
							cycleCom = 0;
							rowNumberC = 0;
						}

						dxC = cycleCom;
						dyC = cycleCom;
						cycleCounter = 0;
						switchC = 0;
					}
				}
			}

			if (segC == switchC){
				ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) - 0.5f, 20.0f, ((dyC - 7.0f) * 2) - 0.5f));
			}
			else
				ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) + 0.5f, 20.0f, ((dyC - 7.0f) * 2) + 0.5f));

			index = ((dxC * 2) + dyC + segC) + (rowLength*rowNumberC);

			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			m_pHeightMap->ColourTarget(index, true);

			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			debugCycle[0] = true;
		}
	}
	else
	{
		debugCycle[0] = false;
	}
	

	
	if (this->IsKeyPressed('I'))
	{
		if (debugCycle[1] == false)
		{
			if (--segC <  1)
			{
				segC = 0;

				//left to right
				if (cycleCounter == 3)
				{
					if (dxC >= cycleCom)
					{
						--dxC;
					}
					else
					{
						cycleCounter = 2;
					}
				}

				//bottom up
				if (cycleCounter == 2)
				{
					segC = 1;
					if (dyC <= cycleCom)
					{
						++dyC;
						++rowNumberC;
					}
					else
					{
						cycleCounter = 1;
					}
				}

				//right to left
				if (cycleCounter == 1)
				{
					switchC = 1;
					if (dxC <= cycleCom)
					{
						++dxC;
					}
					else
					{
						--cycleCom;
						cycleCounter = 0;
					}
				}

				//top down
				if (cycleCounter == 0)
				{
					segC = 1;
					if (dyC > cycleCom){
						--dyC;
						--rowNumberC;

						if (dyC == cycleCom)
						{
							switchC = 1;
						}
					}
					else
					{
						cycleCounter = 4;
					}
				}

				if (cycleCounter == 4)
				{
					if (cycleCom == 0)
					{
						cycleCom = 7;
						rowNumberC = 7;
					}

					dxC = cycleCom;
					dyC = cycleCom;
					cycleCounter = 3;
					switchC = 0;
				}
			}

			if (segC == switchC)
				 ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) - 0.5f, 20.0f, ((dyC - 7.0f) * 2) - 0.5f));
			else
				 ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) + 0.5f, 20.0f, ((dyC - 7.0f) * 2) + 0.5f));

			index = ((dxC * 2) + dyC + segC) + (rowLength*rowNumberC);

			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			m_pHeightMap->ColourTarget(index, true);

			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			debugCycle[1] = true;
		}
	}
	else
	{
		debugCycle[1] = false;
	}

	//if debug mode is active
	if (debugSlow)
	{
		/*
		every 60 frames update them balls
			reduces framerate to 1 until space bar is released
		*/
		if ((int)m_frameCount % 60 == 0)
		{
			UpdateBall(dt);
		}
	}
	else
	{
		UpdateBall(dt);
	}

	
	
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::HandleRender()
{
	XMVECTOR vCamera, vLookat;
	XMVECTOR vUpVector = XMVectorSet(0.0f, 1.0f, 0.0f, 0.0f);
	XMMATRIX matProj, matView;

	switch( m_cameraState )
	{
		case CAMERA_TOP:
			vCamera = XMVectorSet(0.0f, 100.0f, 0.1f, 0.0f);
			vLookat = XMVectorSet(0.0f, 0.0f, 0.0f, 0.0f);
			matView = XMMatrixLookAtLH(vCamera, vLookat, vUpVector);
			matProj = XMMatrixOrthographicLH(64, 36, 1.5f, 5000.0f);
			break;
		case CAMERA_ROTATE:
			vCamera = XMVectorSet(sin(m_rotationAngle)*m_cameraZ, (m_cameraZ*m_cameraZ) / 50, cos(m_rotationAngle)*m_cameraZ, 0.0f);
			vLookat = XMVectorSet(0.0f, 10.0f, 0.0f, 0.0f);
			matView = XMMatrixLookAtLH(vCamera, vLookat, vUpVector);
			matProj = XMMatrixPerspectiveFovLH(float(D3DX_PI / 7), 2, 1.5f, 5000.0f);
			break;
	}

	this->EnableDirectionalLight(1, XMFLOAT3(-1.f, -1.f, -1.f), XMFLOAT3(0.55f, 0.55f, 0.65f));
	this->EnableDirectionalLight(2, XMFLOAT3(1.f, -1.f, 1.f), XMFLOAT3(0.15f, 0.15f, 0.15f));

	this->SetViewMatrix(matView);
	this->SetProjectionMatrix(matProj);

	this->Clear(XMFLOAT4(0.05f, 0.05f, 0.5f, 1.f));

	XMMATRIX worldMtx;

	XMFLOAT3 pos = ball->GetPosition();

	worldMtx = XMMatrixTranslation(pos.x, pos.y, pos.z);
	
	this->SetWorldMatrix(ball->GetWorld());
	SetDepthStencilState( false, false );
	
	if (ball)
	{
		ball->Draw();
	}

	SetDepthStencilState( false, true );
	m_pHeightMap->Draw( m_frameCount );

	this->SetWorldMatrix(ball->GetWorld());
	SetDepthStencilState(true, true);
	if (ball)
	{
		ball->Draw();
	}

	m_frameCount++;
}

void Application::UpdateBall(float dt)
{
	// Update Sphere
	XMVECTOR vSColPos, vSColNorm;

	if (!mSphereCollided)
	{
		XMVECTOR vSPos = XMLoadFloat3(&ball->GetPosition());
		XMVECTOR vSVel = XMLoadFloat3(&ball->GetVelocity());
		XMVECTOR vSAcc = XMLoadFloat3(&ball->GetGravity());

		vSPos += vSVel; // Really important that we add LAST FRAME'S velocity as this was how fast the collision is expecting the ball to move
		vSVel += vSAcc; // The new velocity gets passed through to the collision so it can base its predictions on our speed NEXT FRAME
		
		XMFLOAT3 pos, vel;

		XMStoreFloat3(&vel, vSVel);
		ball->SetVelocity(vel);

		XMStoreFloat3(&pos, vSPos);
		ball->SetPosition(pos);

		ball->SetSpeed(XMVectorGetX(XMVector3Length(vSVel)));

		mSphereCollided = m_pHeightMap->RayCollision(vSPos, vSVel, ball->GetSpeed(), vSColPos, vSColNorm);

		if (mSphereCollided)
		{
			//here for bouncy bouncy
			ball->SetVelocity(XMFLOAT3(0.0f, 0.0f, 0.0f));
			XMStoreFloat3(&pos, vSColPos);
			ball->SetPosition(pos);

		}
	}

	ball->Update(dt);
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////



int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int)
{
	Application application;

	Run(&application);

	return 0;
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


