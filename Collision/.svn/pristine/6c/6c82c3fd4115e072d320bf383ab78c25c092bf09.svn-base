#include "Application.h"
#include "HeightMap.h"
#include "Ball.h"
#include "BallManager.h"

Application* Application::s_pApp = NULL;
bool Application::drop = true;

const int CAMERA_TOP = 0;
const int CAMERA_ROTATE = 1;
const int CAMERA_MAX = 2;

static int a(0), b(30);

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

bool Application::HandleStart()
{
	s_pApp = this;

	m_frameCount = 0.0f;

	m_bWireframe = true;
	m_pHeightMap = new HeightMap( "Resources/heightmap.bmp", 2.0f, 0.75f );

	m_cameraZ = 50.0f;
	m_rotationAngle = 0.f;

	m_reload = false;

	ReloadShaders();

	if (!this->CommonApp::HandleStart())
		return false;

	this->SetRasterizerState( false, m_bWireframe );

	m_cameraState = CAMERA_ROTATE;

	debugSlow = false;

	//initialising the debug cyclic with the top triangle center
	debugCyclic[0] = XMFLOAT3(-14.0f, 20.0f, -14.0f);

	ballMgr = new BallManager(m_pHeightMap);

	ballMgr->createBall(debugCyclic[0]);
	

	//intialising the debug cyclic with the tops 3 corners
	m_pHeightMap->GetCorners(0, debugCyclic);

	//paiting the top as initial target
	m_pHeightMap->ColourTarget(0);

	return true;
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::HandleStop()
{
	delete m_pHeightMap;

	if( ballMgr )
		delete ballMgr;

	this->CommonApp::HandleStop();
}



//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::ReloadShaders()
{
	if( m_pHeightMap->ReloadShader() == false )
		this->SetWindowTitle("Reload Failed - see Visual Studio output window. Press F5 to try again.");
	else
		this->SetWindowTitle("Your Shader Here. Press F5 to reload shader file.");
}

void Application::HandleUpdate(float dt)
{
	//if space bar is pressed down 
	if (this->IsKeyPressed(' '))
	{
		//reduce frame rate 1 frame a second
		debugSlow = true;
	}
	else
	{
		//regular frame rate of 60 frames a second
		debugSlow = false;
	}


	if( m_cameraState == CAMERA_ROTATE )
	{
		if (this->IsKeyPressed('Q') && m_cameraZ > 38.0f )
			m_cameraZ -= 1.0f;
		
		if (this->IsKeyPressed('A'))
			m_cameraZ += 1.0f;

		if (this->IsKeyPressed('O'))
			m_rotationAngle -= .01f;
		
		if (this->IsKeyPressed('P'))
			m_rotationAngle += .01f;
	}

	
	static bool dbC = false;

	if (this->IsKeyPressed('C') )	
	{
		if( !dbC )
		{
			if( ++m_cameraState == CAMERA_MAX )
				m_cameraState = CAMERA_TOP;

			dbC = true;
		}
	}
	else
	{
		dbC = false;
	}


	static bool dbW = false;
	if (this->IsKeyPressed('W') )	
	{
		if( !dbW )
		{
			m_bWireframe = !m_bWireframe;
			this->SetRasterizerState( false, m_bWireframe );
			dbW = true;
		}
	}
	else
	{
		dbW = false;
	}


	if (this->IsKeyPressed(VK_F5))
	{
		if (!m_reload)
		{
			ReloadShaders();
			m_reload = true;
		}
	}
	else
		m_reload = false;

	static bool dbR = false;
	if (this->IsKeyPressed('R') )
	{
		if( dbR == false )
		{
			static int dx = 0;
			static int dy = 0;

			//if there is a previously controlled ball, then drop it
			if (ballMgr->GetUsersBallNumber() >= 0)
			{
				Ball* prevBall = ballMgr->GetUsersBall();
				prevBall->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
				prevBall->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			}

			ballMgr->createBall();
			Ball* ball = ballMgr->GetUsersBall();

			ball->SetPosition(XMFLOAT3((float)((rand() % 14 - 7.0f) - 0.5), 20.0f, (float)((rand() % 14 - 7.0f) - 0.5)));
			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			ball->SetSphereCollided(false);
			drop = true;
			dbR = true;
		}
	}
	else
	{
		dbR = false;
	}

	static bool dbT = false;
	if (this->IsKeyPressed('T'))
	{
		if (dbT == false)
		{
			static int dx = 0;
			static int dy = 0;

			//if there is a previously controlled ball, then drop it
			if (ballMgr->GetUsersBallNumber() >= 0)
			{
				Ball* prevBall = ballMgr->GetUsersBall();
				prevBall->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
				prevBall->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			}

			ballMgr->createBall();
			Ball* ball = ballMgr->GetUsersBall();

			ball->SetPosition(XMFLOAT3(-14.0f, 20.0f, -14.0f));
			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			ball->SetSphereCollided(false);
			drop = true;
			dbT = true;
		}
	}
	else
	{
		dbT = false;
	}

	static int dx = 0;
	static int dy = 0;
	static int seg = 0;
	int rowLength = 29;
	static int rowNumber = 0;
	static int counter = 0;
	static bool dbN[2]{false, false};
	static int trigger = 0;
	
	//forward incremental
	if (this->IsKeyPressed('N') )
	{
		if (dbN[0] == false)
		{
			if( ++seg == 2 )
			{
				seg=0;

				if( ++dx==15 )  
				{
					if( ++dy ==15 ) dy=0;
					dx = 0;
				}
			}

			//calculate row number 
			if (++counter == 30)
			{
				//after a full row 
				counter = 0;

				//increment rownumber
				if (++rowNumber == 15)rowNumber = 0;
			}

			//get the center of the new target
			if (seg == 0){
				debugCyclic[0] = XMFLOAT3(((dx - 7.0f) * 2) - 0.5f, 20.0f, ((dy - 7.0f) * 2) - 0.5f);
			}
			else{
				debugCyclic[0] = XMFLOAT3(((dx - 7.0f) * 2) + 0.5f, 20.0f, ((dy - 7.0f) * 2) + 0.5f);
			}
			
			//formula to calculate array index of targeted triangle
			int index = (((dx * 2) + dy) + seg) + (rowLength*rowNumber);
			
			//output array index for testing
			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			//colour new target
			m_pHeightMap->ColourTarget(index);
			//obtain target's corners
			m_pHeightMap->GetCorners(index, debugCyclic);

			//if there is a previously controlled ball, then drop it
			if (ballMgr->GetUsersBallNumber() >= 0)
			{
				Ball* prevBall = ballMgr->GetUsersBall();
				prevBall->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
				prevBall->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			}

			ballMgr->createBall(debugCyclic[0]);

			//set trigger back to the center for next drop
			trigger = 0;

			//delay drop until D is pressed
			drop = false;

			dbN[0] = true;
		}
	}
	else
	{
		dbN[0] = false;
	}

	//backwards decremental
	if (this->IsKeyPressed('M'))
	{
		if (dbN[1] == false)
		{
			if (--seg < 0)
			{
				seg = 1;

				if (--dx < 0)
				{
					if (--dy < 0) dy = 14;
					dx = 14;
				}
			}

			//calculate row number 
			if (--counter < 0)
			{
				//after a full row
				counter = 29;

				//decrement rownumber
				if (--rowNumber < 0 )rowNumber = 14;
			}

			//get the center of the new target
			if (seg == 0){
				debugCyclic[0] = XMFLOAT3(((dx - 7.0f) * 2) - 0.5f, 20.0f, ((dy - 7.0f) * 2) - 0.5f);
			}
			else{
				debugCyclic[0] = XMFLOAT3(((dx - 7.0f) * 2) + 0.5f, 20.0f, ((dy - 7.0f) * 2) + 0.5f);
			}

			//formula to calculate array index of targeted triangle
			int index = (((dx * 2) + dy) + seg) + (rowLength*rowNumber);

			
			//output array index for testing
			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			//colour new target
			m_pHeightMap->ColourTarget(index);
			//obtain target's corners
			m_pHeightMap->GetCorners(index, debugCyclic);

			//if there is a previously controlled ball, then drop it
			if (ballMgr->GetUsersBallNumber() >= 0)
			{
				Ball* prevBall = ballMgr->GetUsersBall();
				prevBall->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
				prevBall->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			}

			ballMgr->createBall(debugCyclic[0]);
			
			//set trigger back to the center for next drop
			trigger = 0;

			//delay drop until D is pressed
			drop = false;

			dbN[1] = true;
		}
	}
	else
	{
		dbN[1] = false;
	}

	
	static bool trig = false;

	if (this->IsKeyPressed('D'))
	{
		if (trig == false)
		{	
			//if there is an active ball cycle through center and it's corners
			if (ballMgr->GetUsersBallNumber() >= 0)
			{
				Ball* ball = ballMgr->GetUsersBall();
				//set ball position to debugCyclic based off the trigger variable
				ball->SetPosition(debugCyclic[trigger]);

				//reset velocity, gravity, and sphere collided to allow for redrop 
				ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
				ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
				ball->SetSphereCollided(false);

				//allow drop
				drop = true;
				trig = true;

				//increment trigger to get next corner or return to center
				if (++trigger == 4)
				{
					//if trigger == 4 wrap back around to 0
					trigger = 0;
				}
			}
		}
	}
	else
	{
		trig = false;
		
	}

	static bool clear = false;
	//if the e key is pressed delete all currently active balls
	if (this->IsKeyPressed('E'))
	{
		if (!clear)
		{
			ballMgr->ClearAll();
			clear = true;
		}
	}
	else
		clear = false;
	
	static int dxC = 0;
	static int dyC = 0;
	static int segC = 0;
	static int rowNumberC = 0;
	static int cycleCom = 0;
	static int switchC = 0;
	static bool up = true;
	static bool debugCycle[2] = { false, false };
	int index = 0;

/*
	if (this->IsKeyPressed('U'))
	{
		if (debugCycle[0] == false)
		{
			if (++segC == 2)
			{
				segC = 0;

				if (up)
				{
					//left to right
					if (dxC < 14 - cycleCom)
					{
						++dxC;
					}
					else
					{
						//bottom up
						segC = 0;
						if (dyC < 14 - cycleCom){
							++dyC;
							++rowNumberC;
						}
						else
						{
							up = false;
						}
					}
				}
				
				if (!up)
				{
					//right to left
					if (dxC > cycleCom)
					{
						--dxC;
					}
					else
					{
						static bool once = false;
						if (once == false)
						{
							++cycleCom;
							once = true;
						}
						
						//up down
						segC = 0;
						if (dyC > cycleCom)
						{
							--dyC;
							--rowNumberC;

							if (dyC == cycleCom)
							{
								switchC = 0;
							}
						}
						else
						{
							if (cycleCom == 8)
							{
								cycleCom = 0;
								rowNumberC = 0;
							}

							dxC = cycleCom;
							dyC = cycleCom;
			
							switchC = 0;
							up = true;
							once = false;
						}
					}			
				}
			}

			if (segC == switchC){
				ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) - 0.5f, 20.0f, ((dyC - 7.0f) * 2) - 0.5f));
			}
			else
				ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) + 0.5f, 20.0f, ((dyC - 7.0f) * 2) + 0.5f));

			index = ((dxC * 2) + dyC + segC) + (rowLength * rowNumberC);

			if (index == 224)
			{
				int x = 1;
				x = 1;
			}


			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			m_pHeightMap->ColourTarget(index);

			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			debugCycle[0] = true;
		}
	}
	else
	{
		debugCycle[0] = false;
	}

	
	if (this->IsKeyPressed('I'))
	{
		if (debugCycle[1] == false)
		{
			if (--segC < 0)
			{
				segC = 1;

				
				if (up)
				{
					if (dxC > cycleCom)
					{
						++dxC;
					}
					else
					{
						segC = 0;
						if (dyC >  cycleCom){
							--dyC;
							--rowNumberC;
						}
						else
						{
							up = false;
						}
					}
				}

				
				if (!up)
				{
					//right to left
					if (dxC > cycleCom)
					{
						++dxC;
					}
					else
					{
						static bool once = false;
						if (once == false)
						{
							--cycleCom;
							once = true;
						}

						//up down
						segC = 1;
						if (dyC > cycleCom)
						{
							++dyC;
							++rowNumberC;

							if (dyC == cycleCom)
							{
								switchC = 0;
							}
						}
						else
						{
							if (cycleCom == 0)
							{
								cycleCom = 7;
								rowNumberC = 7;
							}

							dxC = cycleCom;
							dyC = cycleCom;

							switchC = 0;
							up = true;
							//once = false;
						}
					}
				}
			}
			

			if (segC == switchC)
				 ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) - 0.5f, 20.0f, ((dyC - 7.0f) * 2) - 0.5f));
			else
				 ball->SetPosition(XMFLOAT3(((dxC - 7.0f) * 2) + 0.5f, 20.0f, ((dyC - 7.0f) * 2) + 0.5f));

			index = ((dxC * 2) + dyC + segC) + (rowLength*rowNumberC);

			char text[256];
			sprintf_s(text, "arrayIndex =%i\n", index);
			OutputDebugStringA(text);

			m_pHeightMap->ColourTarget(index, true);

			ball->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
			ball->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
			mSphereCollided = false;
			debugCycle[1] = true;
		}
	}
	else
	{
		debugCycle[1] = false;
	}
*/

	//if debug mode is active
	if (debugSlow)
	{
		/*
		every 60 frames update them balls
			reduces framerate to 1 until space bar is released
		*/
		if ((int)m_frameCount % 60 == 0)
		{
			ballMgr->UpdateBalls(dt);
		}
	}
	else
	{
		ballMgr->UpdateBalls(dt);
	}
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void Application::HandleRender()
{
	XMVECTOR vCamera, vLookat;
	XMVECTOR vUpVector = XMVectorSet(0.0f, 1.0f, 0.0f, 0.0f);
	XMMATRIX matProj, matView;

	switch( m_cameraState )
	{
		case CAMERA_TOP:
			vCamera = XMVectorSet(0.0f, 100.0f, 0.1f, 0.0f);
			vLookat = XMVectorSet(0.0f, 0.0f, 0.0f, 0.0f);
			matView = XMMatrixLookAtLH(vCamera, vLookat, vUpVector);
			matProj = XMMatrixOrthographicLH(64, 36, 1.5f, 5000.0f);
			break;
		case CAMERA_ROTATE:
			vCamera = XMVectorSet(sin(m_rotationAngle)*m_cameraZ, (m_cameraZ*m_cameraZ) / 50, cos(m_rotationAngle)*m_cameraZ, 0.0f);
			vLookat = XMVectorSet(0.0f, 10.0f, 0.0f, 0.0f);
			matView = XMMatrixLookAtLH(vCamera, vLookat, vUpVector);
			matProj = XMMatrixPerspectiveFovLH(float(D3DX_PI / 7), 2, 1.5f, 5000.0f);
			break;
	}

	this->EnableDirectionalLight(1, XMFLOAT3(-1.f, -1.f, -1.f), XMFLOAT3(0.55f, 0.55f, 0.65f));
	this->EnableDirectionalLight(2, XMFLOAT3(1.f, -1.f, 1.f), XMFLOAT3(0.15f, 0.15f, 0.15f));

	this->SetViewMatrix(matView);
	this->SetProjectionMatrix(matProj);

	this->Clear(XMFLOAT4(0.05f, 0.05f, 0.5f, 1.f));

	for (int i = 0; i < ballMgr->GetNumOfBalls(); i++)
	{
		Ball* ball = ballMgr->GetBallByIndex(i);
		this->SetWorldMatrix(ball->GetWorld());
		SetDepthStencilState(false, false);
		ball->Draw();
	}
	
	SetDepthStencilState( false, true );
	m_pHeightMap->Draw( m_frameCount );

	for (int i = 0; i < ballMgr->GetNumOfBalls(); i++)
	{
		Ball* ball = ballMgr->GetBallByIndex(i);
		this->SetWorldMatrix(ball->GetWorld());
		SetDepthStencilState(true, true);
		ball->Draw();
	}

	m_frameCount++;
}


//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////



int WINAPI WinMain(HINSTANCE,HINSTANCE,LPSTR,int)
{
	Application application;

	Run(&application);

	return 0;
}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////


