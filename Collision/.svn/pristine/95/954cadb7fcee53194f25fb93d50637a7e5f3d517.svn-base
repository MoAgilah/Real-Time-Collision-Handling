#include "BallManager.h"

int BallManager::userControlledBall = -1;

BallManager::BallManager(HeightMap* mapData)
	:map(mapData)
{
	//create single mesh instance
	m_pMesh = CommonMesh::NewSphereMesh(Application::s_pApp, 1.0f, 16, 16);
	//create debug ball
	DebugBall = new Ball(m_pMesh);
	//put it in the vector
	activeBalls.push_back(DebugBall);
	//create the mininum of balls
	for (int i = 1; i < MinNumBalls; i++)
	{
		activeBalls.push_back(new Ball(m_pMesh));
	}
	//assign the first non debug ball as first available
	firstAvailable = activeBalls[1];
}


void BallManager::IncreaseNumOfBalls()
{
	//as long as the number of balls is less than max
	if (activeBalls.size() < MaxNumBalls)
	{
		//create another
		activeBalls.push_back(new Ball(m_pMesh));
	}
}

void BallManager::DecreaseNumOfBalls()
{
	//as long as the ball mark for deletion is not the debug ball or first available
	if (activeBalls.size() != 2)
	{
		//delete the pointer 
		delete activeBalls.back();
		//remove ball from pool
		activeBalls.pop_back();
	}
}

BallManager::~BallManager()
{
	map = nullptr;	//null reference to height map
	for (int i = 0; i < activeBalls.size(); i++)
	{
		//deallocate pointer in array
		delete activeBalls[i];	
		activeBalls[i] = nullptr;
	}

	delete m_pMesh;	//deallocate sphere mesh
}

void BallManager::InitBall(XMFLOAT3 iPos, XMFLOAT3 iVel, XMFLOAT3 iGrav)
{
	Ball* ball = firstAvailable;	//capture the first available in a temp var

	for (int i = 1; i < activeBalls.size(); ++i)
	{
		//if activeball is the first available 
		if (activeBalls[i] == firstAvailable)
			continue;	//continue
		
		//the ball isn't active
		if (!activeBalls[i]->GetEnabled())
		{
			//make it the first available
			firstAvailable = activeBalls[i];
			//if found break out of loop
			break;
		}
	}

	//init the temp ball and then activate it 
	ball->SetPosition(iPos);
	ball->SetVelocity(iVel);
	ball->SetGravity(iGrav);
	ball->SetEnabled(true);
	ball->SetSphereCollided(false);
}

Ball* BallManager::GetFirstAvailable()
{
	return firstAvailable;
}

void BallManager::InitDebugBall(XMFLOAT3 iPos, XMFLOAT3 iVel, XMFLOAT3 iGrav)
{
	//init the debug ball and activate it
	DebugBall->SetPosition(iPos);
	DebugBall->SetVelocity(iVel);
	DebugBall->SetGravity(iGrav);
	DebugBall->SetEnabled(true);
	DebugBall->SetSphereCollided(false);
}

void BallManager::UpdateBalls(float dt)
{
	//Update Sphere
	XMVECTOR vSColPos, vSColNorm;
	float damping = 0.8;

	for (int i = 0; i < activeBalls.size(); ++i)
	{
		//if enabled
		if (activeBalls[i]->GetEnabled())
		{
			//if sphere hasn't collided
			if (!activeBalls[i]->GetSphereCollided())
			{
				//extract the information from the ball
				XMVECTOR vSPos = XMLoadFloat3(&activeBalls[i]->GetPosition());
				XMVECTOR vSVel = XMLoadFloat3(&activeBalls[i]->GetVelocity());
				XMVECTOR vSAcc = XMLoadFloat3(&activeBalls[i]->GetGravity());

				//update the values
				vSPos += vSVel; //Really important that we add LAST FRAME'S velocity as this was how fast the collision is expecting the ball to move
				vSVel += vSAcc; //The new velocity gets passed through to the collision so it can base its predictions on our speed NEXT FRAME

				XMFLOAT3 pos, vel;

				//pass it back to the ball
				XMStoreFloat3(&vel, vSVel);
				activeBalls[i]->SetVelocity(vel);

				XMStoreFloat3(&pos, vSPos);
				activeBalls[i]->SetPosition(pos);

				activeBalls[i]->SetSpeed(XMVectorGetX(XMVector3Length(vSVel)));

				//extract collisional data
				FaceCollisionData* FCD = map->RayCollision(vSPos, vSVel, activeBalls[i]->GetSpeed(), vSColPos, vSColNorm);

				bool collided = false;
				
				//if FCD isnt null
				if (FCD != nullptr)
				{
					//there has been a collision
					collided = true;
				}

				//pass collided to the ball
				activeBalls[i]->SetSphereCollided(collided);

				//if collided
				if (activeBalls[i]->GetSphereCollided())
				{
					//get previous velocity from the ball
					XMVECTOR V = XMLoadFloat3(&activeBalls[i]->GetVelocity());

					//get the face's normal that ball collided with
					XMVECTOR N = XMLoadFloat3(&FCD->m_vNormal);

					//V.N
					float dotVN = XMVectorGetX(XMVector3Dot(V, N));

					//R = V - 2N(V.N)
					XMVECTOR R = (V - ((2 * N)*dotVN))*damping;

					XMFLOAT3 newVel;
					XMStoreFloat3(&newVel, R);

					//here for bouncy bouncy
					activeBalls[i]->SetVelocity(newVel);
					XMStoreFloat3(&pos, vSColPos);
					activeBalls[i]->SetPosition(pos);
					activeBalls[i]->SetSphereCollided(false);
				}
			}
			//update the ball
			activeBalls[i]->Update(dt);
		}
	}
}

void BallManager::DrawBalls(Application* pApp)
{
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		//if enabled
		if (activeBalls[i]->GetEnabled())
		{
			//set the world matrix
			pApp->SetWorldMatrix(activeBalls[i]->GetWorld());
			//draw the ball
			activeBalls[i]->Draw();
		}
	}
}

void BallManager::CheckForOutOfBounds()
{
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		//if below the height map
		if (activeBalls[i]->GetPosition().y <= -10.f)
		{
			//return to the pool
			activeBalls[i]->SetEnabled(false);
		}
	}
}

void BallManager::ClearAll()
{
	//disactivate all of the balls1
	for (int i = 0; i < activeBalls.size(); ++i)
	{
		activeBalls[i]->SetEnabled(false);
	}
}

Ball* BallManager::GetDebugBall()
{
	return DebugBall;
}


void BallManager::DropAll()
{
	//for all expect the debug ball
	for (int i = 1; i < activeBalls.size(); ++i)
	{
		//randomly get a position
		XMFLOAT3 pos = XMFLOAT3((float)((rand() % 14 - 7.0f) - 0.5), 20.0f, (float)((rand() % 14 - 7.0f) - 0.5));

		//initialise and activate the ball
		activeBalls[i]->SetPosition(pos);
		activeBalls[i]->SetVelocity(XMFLOAT3(0.0f, 0.2f, 0.0f));
		activeBalls[i]->SetGravity(XMFLOAT3(0.0f, -0.05f, 0.0f));
		activeBalls[i]->SetSphereCollided(false);
		activeBalls[i]->SetEnabled(true);
	}
}