#include "Collisions.h"
#include "Ball.h"
#include <algorithm>

Collisions* Collisions::self = nullptr;

Collisions::Collisions()
{
	if (self == nullptr)
	{
		self = this;
	}
}


Collisions::~Collisions()
{
	self = nullptr;
}

Collisions* Collisions::GetCol()
{
	return self;
}

// Intersect sphere s0 moving in direction d over time interval t0 <= t <= t1, against
// a stationary sphere s1. If found intersecting, return time(t) of collision
bool Collisions::TestMovingSphereToSphere(Ball* b0, Ball* b1, float &colDist)
{
	//make a copy to create expanded sphere for collision
	Ball onstack(*b1);

	//expand sphere b1 by the radius of b0
	onstack.SetRadius(b0->GetRadius() + b1->GetRadius());

	XMVECTOR vel0, vel1, V;
	vel0 = XMLoadFloat3(&b0->GetVelocity());
	vel1 = XMLoadFloat3(&b1->GetVelocity());

	//subtract the velocity of s1 from both s0 and s1, making s1 stationary
	V = vel0 - vel1;
	float vLen = XMVectorGetX(XMVector3Length(V));

	//can now test directed segment s = s0.c + tv, v = (v0-v1)/||v0-v1|| against the expanded sphere for intersection
	XMFLOAT3 colPos = XMFLOAT3();	//rayPoint
	if (IntersectRaySphere(b0->GetPosition(), V / vLen, &onstack, colDist, colPos))
		return colDist <= vLen;

	return false;
}
// Intersects ray r = p + td, |d| = 1, with sphere s and, if intersecting,
// returns t value of intersection and intersection point q
bool Collisions::IntersectRaySphere(XMFLOAT3 rayPos, XMVECTOR dir, Ball* s, float &colDist, XMFLOAT3 &colPos)
{
	XMVECTOR point(XMLoadFloat3(&rayPos)), sCenter(XMLoadFloat3(&s->GetPosition()));

	// Calculate ray start's offset from the sphere center i.e. point - sphereCenter
	XMVECTOR sphereToPoint = point - sCenter;

	float b = XMVectorGetX(XMVector3Dot(sphereToPoint, dir));

	float c = XMVectorGetX(XMVector3Dot(sphereToPoint, sphereToPoint)) - (s->GetRadius() * s->GetRadius());

	//exit if ray's origin is outside s(c > 0) and ray is pointing away from s(b > 0)
	if (c > 0.0f && b > 0.0f) return false;

	float discR = (b * b) - c;

	//a negative discriminant means the ray missed the sphere
	if (discR < 0.0f) return false;

	//ray now found to intersect the sphere, compute the smallest t value of intersection
	colDist = -b - sqrtf(discR);

	//if colDist is negative 
	if (colDist < 0.0f) colDist = 0.0f;	//ray started inside sphere so clamp colDist to zero

	//intersection point
	XMVECTOR pos(point + (colDist * dir));
	XMStoreFloat3(&colPos, pos);

	return true;
}

void Collisions::ResolveSphereCollisions(Ball* b0, Ball* b1)
{
	//extract the position and store in a vector for execution
	XMVECTOR sCenter0 = XMLoadFloat3(&b0->GetPosition());
	XMVECTOR sCenter1 = XMLoadFloat3(&b1->GetPosition());

	float distToTravel = ((b0->GetRadius() + b1->GetRadius()) - XMVectorGetX(XMVector3Length(sCenter0 - sCenter1))) / 2;
	sCenter0 += XMVector3Normalize(sCenter0 - sCenter1) * (distToTravel);
	sCenter1 -= XMVector3Normalize(sCenter0 - sCenter1) * (distToTravel);

	float damping = 0.9f;

	//first find the normalised vector n  
	//from the center of sphere1 to the center of sphere2
	XMVECTOR N = XMVector3Normalize(sCenter0 - sCenter1);

	//extract the velocity vector and store in a vector for execution
	XMVECTOR sVel0 = XMLoadFloat3(&b0->GetVelocity());
	XMVECTOR sVel1 = XMLoadFloat3(&b1->GetVelocity());

	//find the length of the component of each of the velocity vectors along n
	float a1 = XMVectorGetX(XMVector3Dot(sVel0, N));
	float a2 = XMVectorGetX(XMVector3Dot(sVel1, N));

	//calculate the optimised momentum of any particle with mass
	float opP = (2.0f *(a1 - a2)) / (b0->GetMass() + b1->GetMass());

	//calculate the new velocity vector for sphere 1
	XMVECTOR newVel0 = (sVel0 - opP * b1->GetMass() * N)*damping;
	//calculate the new velocity vector for sphere 2
	XMVECTOR newVel1 = (sVel1 + opP * b0->GetMass() * N)*damping;

	//return the values into a float 3 to be applied to the balls
	XMFLOAT3 vel0, vel1;
	XMStoreFloat3(&vel0, newVel0);
	XMStoreFloat3(&vel1, newVel1);
	b0->SetVelocity(vel0);
	b1->SetVelocity(vel1);

	XMFLOAT3 pos0, pos1;
	XMStoreFloat3(&pos0, sCenter0);
	XMStoreFloat3(&pos1, sCenter1);
	b0->SetPosition(pos0);
	b1->SetPosition(pos1);
}

bool IntersectRayCyclinder(Ball* b0, XMFLOAT3 startP, XMFLOAT3 endP, float& ColDist)
{
	XMFLOAT3 center = b0->GetPosition();
	float r = b0->GetRadius();
	XMVECTOR minP = XMLoadFloat3(&XMFLOAT3(center.x - r, center.y - r, center.z - r));
	XMVECTOR maxP = XMLoadFloat3(&XMFLOAT3(center.x + r, center.y + r, center.z + r));
	XMVECTOR dir = XMLoadFloat3(&startP) - XMLoadFloat3(&endP);
	XMVECTOR m = minP - XMLoadFloat3(&center);
	XMVECTOR n = maxP - minP;

	float md = XMVectorGetX(XMVector3Dot(m, dir));
	float nd = XMVectorGetX(XMVector3Dot(n, dir));
	float dd = XMVectorGetX(XMVector3Dot(dir, dir));

	// Test if segment fully outside either endcap of cylinder
	if (md < 0.0f && md + nd < 0.0f) return 0; // Segment outside ’startP’ side of cylinder
	if (md > dd && md + nd > dd) return 0; // Segment outside ’endP’ side of cylinder

	float nn = XMVectorGetX(XMVector3Dot(n, n));
	float mn = XMVectorGetX(XMVector3Dot(m, n));
	float a = dd * nn - nd * nd;
	float k = XMVectorGetX(XMVector3Dot(m, m)) - r * r;
	float c = dd * k - md * md;

	if (abs(a) < FLT_EPSILON) {
		// Segment runs parallel to cylinder axis
		if (c > 0.0f) return 0; // ’a’ and thus the segment lie outside cylinder
		// Now known that segment intersects cylinder; figure out how it intersects
		if (md < 0.0f) ColDist = -mn / nn; // Intersect segment against ’p’ endcap
		else if (md > dd) ColDist = (nd - mn) / nn; // Intersect segment against ’q’ endcap
		else ColDist = 0.0f; // ’a’ lies inside cylinder
		return 1;
	}
	float b = dd * mn - nd * md;
	float discr = b * b - a * c;
	if (discr < 0.0f) return 0; // No real roots; no intersection

	ColDist = (-b - sqrt(discr)) / a;
	if (ColDist < 0.0f || ColDist > 1.0f) return 0; // Intersection lies outside segment
	if (md + ColDist * nd < 0.0f) {
		// Intersection outside cylinder on ’p’ side
		if (nd <= 0.0f) return 0; // Segment pointing away from endcap
		ColDist = -md / nd;
		// Keep intersection if Dot(S(t) - p, S(t) - p) <= r∧2
		return k + 2 * ColDist * (mn + ColDist * nn) <= 0.0f;
	}
	else if (md + ColDist * nd > dd) {
		// Intersection outside cylinder on ’q’ side
		if (nd >= 0.0f) return 0; // Segment pointing away from endcap
		ColDist = (dd - md) / nd;
		// Keep intersection if Dot(S(t) - q, S(t) - q) <= r∧2
		return k + dd - 2 * md + ColDist * (2 * (mn - nd) + ColDist * nn) <= 0.0f;
	}

	// Segment intersects cylinder between the endcaps; t is correct
	return true;
}